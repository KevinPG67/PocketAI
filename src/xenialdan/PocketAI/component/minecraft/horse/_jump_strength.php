<?php

namespace xenialdan\PocketAI\component\minecraft\horse;

use xenialdan\PocketAI\component\BaseComponent;
use xenialdan\PocketAI\entitytype\AIEntity;
use xenialdan\PocketAI\entitytype\AIProjectile;
use xenialdan\PocketAI\Loader;

//non-autogenerated
class _jump_strength extends BaseComponent
{
    protected $name = "minecraft:horse.jump_strength";
    /** @var int $max Maximum speed */
    public $max = 20.0;
    /** @var array|float $value Speed or range of speed */
    public $value;


    /**
     * Sets the width and height of the Entity's collision box.
     * _health constructor.
     * @param array $values
     */
    public function __construct(array $values = [])
    {
        $this->max = $values['max'] ?? $this->max;
        $this->value = $values['value'] ?? $this->value;

    }

    /**
     * Applies the changes to the mob
     * @param AIEntity|AIProjectile $entity
     */
    public function apply($entity): void
    {
        $attr = $entity->getAttributeMap()->getAttribute(Loader::HORSE_JUMP_POWER);
        if(is_null($attr)) return;
        $entity->getAttributeMap()->getAttribute(Loader::HORSE_JUMP_POWER)->setMaxValue($this->max);
        if (is_array($this->value)) {
            $entity->getAttributeMap()->getAttribute(Loader::HORSE_JUMP_POWER)->setValue(floatval(mt_rand(($this->value["range_min"] ?? 1) * 10, ($this->value["range_max"] ?? 1) * 10) / 10));//TODO random range function
        } else {
            $entity->getAttributeMap()->getAttribute(Loader::HORSE_JUMP_POWER)->setValue($this->value);
        }
    }

    /**
     * Removes the changes from the mob
     * @param AIEntity|AIProjectile $entity
     */
    public function remove($entity): void
    {
        //TODO add remove() function
    }
}
