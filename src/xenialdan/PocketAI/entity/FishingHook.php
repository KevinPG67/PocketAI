<?php

declare(strict_types=1);

namespace xenialdan\PocketAI\entity;

use pocketmine\block\Water;
use pocketmine\entity\Entity;
use pocketmine\event\entity\EntityDamageByChildEntityEvent;
use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\math\Vector3;
use pocketmine\network\mcpe\protocol\EntityEventPacket;
use pocketmine\Player;
use xenialdan\PocketAI\EntityProperties;
use xenialdan\PocketAI\entitytype\AIProjectile;
use xenialdan\PocketAI\Loader;


//TODO pull in physics: Just fucking throw the item at the players face!!!11!!1!1!111!!1 motion, distance via direction->normalize->multiply distance
class FishingHook extends AIProjectile
{
    const NETWORK_ID = self::FISHING_HOOK;

    /** @var Vector3 */
    public $direction = null;
    /** @var bool */
    public $hooked = false;

    protected $gravity = 0.1;
    protected $drag = 0.05;

    protected function initEntity(/*CompoundTag $nbt*/): void
    {
        $this->setEntityProperties(new EntityProperties("entities/fishing_hook", $this));
        parent::initEntity(/*$nbt*/);
        $this->propertyManager->setFloat(34, 1);
        $this->propertyManager->setFloat(35, 1);
        $this->propertyManager->setFloat(36, 1);
    }

    public function getName(): string
    {
        return "Fishing Hook";
    }

    public function isHooked()
    {
        return $this->hooked;
    }

    public function attack(EntityDamageEvent $source): void
    {
        if ($source->getCause() !== EntityDamageEvent::CAUSE_ENTITY_ATTACK) {
            $this->close();
            //applyDamage?
            if (($owner = $this->getOwningEntity()) instanceof Player)
                /** @var Player $owner */
                Loader::setHook($owner, null);
        }
        parent::attack($source); // TODO: Change the autogenerated stub
    }

    public function onCollideWithEntity(Entity $entity)
    {

        $damage = $this->getResultDamage();

        if ($this->getOwningEntity() === null) {
            $ev = new EntityDamageByEntityEvent($this, $entity, EntityDamageEvent::CAUSE_PROJECTILE, $damage);
        } else {
            $ev = new EntityDamageByChildEntityEvent($this->getOwningEntity(), $this, $entity, EntityDamageEvent::CAUSE_PROJECTILE, $damage);
        }

        $entity->attack($ev);

        Loader::setEntityLink($ev->getDamager(), $ev->getEntity());
    }

    protected function applyGravity(): void
    {
        if ($this->isInAir() && !$this->isCollidedHorizontally) {
            parent::applyGravity();
            return;
        }
        $block = $this->level->getBlock($this);
        //$collided = $this->isCollided;

        if ($this->isActuallyInsideOfWater()) {
            $this->motion->y += $this->gravity;
            $this->motion->y *= 0.2;
            $this->drag = $block->getFrictionFactor();
        }

    }

    public function isActuallyInsideOfWater(): bool
    {
        $block = $this->level->getBlock($this);
        if ($block instanceof Water) {
            $f = $block->y + (1 - $block->getFluidHeightPercent());
            if (($this->y + $this->getEyeHeight()) <= $f) {
                return true;
            }
        }
        return false;
    }

    public function entityBaseTick(int $tickDiff = 1): bool
    {
        if ($this->isUnderwater()) {
            if (mt_rand(0, 300) === 0) {
                $this->hooked = true;
                $pk = new EntityEventPacket();
                $pk->event = EntityEventPacket::FISH_HOOK_HOOK;//have fish on hook
                $pk->entityRuntimeId = $this->getId();
                $this->getLevel()->getServer()->broadcastPacket($this->getViewers(), $pk);
                /** @var Player $owner */
                if (($owner = $this->getOwningEntity()) instanceof Player)
                    $owner->sendMessage("FISH_HOOK_HOOK");
            }
            if (mt_rand(0, 300) === 0) {
                $pk = new EntityEventPacket();
                $pk->event = EntityEventPacket::FISH_HOOK_POSITION;//water particles before hooking
                $pk->entityRuntimeId = $this->getId();
                $this->getLevel()->getServer()->broadcastPacket($this->getViewers(), $pk);
                /** @var Player $owner */
                if (($owner = $this->getOwningEntity()) instanceof Player)
                    $owner->sendMessage("FISH_HOOK_POSITION");
            }
            #EntityEventPacket::FISH_HOOK_BUBBLE;//unknown
            #EntityEventPacket::FISH_HOOK_TEASE;//unknown
        }
        return parent::entityBaseTick($tickDiff); // TODO: Change the autogenerated stub
    }
}
